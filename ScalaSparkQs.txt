Scala Questions:

1. Take the String “Hello Scala”, remove the character 'l' and print the output in uppercase without using any loop. // Tail (.toUpper)
2. Take the String “Hello Spark”, remove first 2 characters and print next 3 characters. // Drop
3. Given val name = “ABC”, val age = 20 and weighs = 80, and print the String “ABC is 20 years old, and weighs 80.0 KG.” println(s" ")
4. Write a program to convert all characters in a string to the next character, ex. “ABC” become “BCD”, “HAL” becomes “IBM” Add Ascii Value 
5. Print all the prime numbers in range 1 to 100. 
6. Given a List("apple", "banana", "orange", "mango"), Iterate over each element and print -> <index> is <element>. ex.                             
	0 is apple
	1 is banana
	2 is orange
	3 is mango
7. Write a program to print "Fizz" if input number is divisible by 3, print "Buzz" if input number is divisible by 5, print "FizzBuzz" if input number is divisible by both 3 and 5, print "Nope" in any other case.
8. Given a List(1, 1, 2, 3, 5, 8), print the list in reverse order.
9. List out all the functions/methods generated by case classes.
10. How do you return a value (or more than one value) from a method in Scala?


Spark Questions:

1. Load the text file logFile.txt into spark, filter out the lines that contains word "error" and print the number of remaining lines.
2. Load the list of numbers from 1 to 10, square up each number and return the string of numbers connected with "-".
3. Load the String "learning spark is fun" and calculate the number of vowels in it.
4. Given a list of operations on RDDs, find out which are Transformations and which are Actions...
	map, flatMap, saveAsTextFile, filter, mapPartitions, countByKey, mapPartitionsWithIndex, 
	sample, takeSample, first, groupByKey, count, reduceByKey, aggregateByKey,
	sortByKey, reduce, join, collect, take.
5. Take a list from 1 to 10 and return the sum of all element using any Action on RDD.
6. Given a key-value pair RDD: rdd={(1, 2), (3, 4), (3, 6)}, write a one line code to add 1 in value of each pair.
7. Given a key-value pair RDD: rdd={(1, 2), (3, 4), (3, 6)}, write a one line code to count the number of element of each key.
8. A Broadcast variable is created like this - val bVar = sc.broadcast(Array(1, 2, 3)). Write a one liner to retrieve the value of bVar.
9. A Accumulator variable is created like this - val acc = sc.accumulator(1, "Accumulator"). Add all the values in List(1 to 10) into the accumulator and print the final value of accumulator. 
10. I have cached some data in memory using rdd.cache(). After few operations I want to clear the cache. How to do that?
